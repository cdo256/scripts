#!/usr/bin/env python3
import os
import subprocess
import argparse
import logging
#from systemd.journal import JournalHandler

parser = argparse.ArgumentParser(description='Edit a text file')
parser.add_argument('-d', '--visual', action='store_true')
parser.add_argument('-t', '--terminal', action='store_true')
parser.add_argument('-l', '--line', type=int)
parser.add_argument('-s', '--synchronous', action='store_true')
parser.add_argument('-e', '--editor', type=str)
parser.add_argument('-2', '--stderr', type=str)
parser.add_argument('file')
args = parser.parse_args()

#TODO: Make this work for remote connections
args.visual = (args.visual or ('DISPLAY' in os.environ and not args.terminal))

args.synchronous = ((not args.visual) or args.synchronous)

if args.editor is None:
	if args.visual:
		args.editor = 'emacs'
	else:
		args.editor = 'emacs'

command = [args.editor]
if args.line is not None:
	command.extend({
		'cdoedit': ['-l', str(args.line)],
		'nano': ['+'+str(args.line)],
		'emacs': ['+'+str(args.line)],
		None: ['+'+str(args.line)]
	}.get(args.editor, ['+'+str(args.line)]))

#if args.stderr is None:
#	args.stderr = 'journald'



command.append(args.file)

if args.synchronous:
	os.execvp(command[0], command)
else:
	subprocess.Popen(command)
